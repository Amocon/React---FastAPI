// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  ReadItemsItemsGetData,
  CreateItemItemsPostData,
  CreateItemItemsPostError,
  CreateItemItemsPostResponse,
  DeleteItemItemsItemIdDeleteData,
  DeleteItemItemsItemIdDeleteError,
  DeleteItemItemsItemIdDeleteResponse,
  ReadItemItemsItemIdGetData,
} from "../types.gen";
import {
  readItemsItemsGet,
  createItemItemsPost,
  deleteItemItemsItemIdDelete,
  readItemItemsItemIdGet,
  client,
} from "../sdk.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const readItemsItemsGetQueryKey = (
  options?: Options<ReadItemsItemsGetData>,
) => [createQueryKey("readItemsItemsGet", options)];

export const readItemsItemsGetOptions = (
  options?: Options<ReadItemsItemsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readItemsItemsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readItemsItemsGetQueryKey(options),
  });
};

export const createItemItemsPostQueryKey = (
  options: Options<CreateItemItemsPostData>,
) => [createQueryKey("createItemItemsPost", options)];

export const createItemItemsPostOptions = (
  options: Options<CreateItemItemsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItemItemsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemItemsPostQueryKey(options),
  });
};

export const createItemItemsPostMutation = (
  options?: Partial<Options<CreateItemItemsPostData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateItemItemsPostResponse,
    CreateItemItemsPostError,
    Options<CreateItemItemsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItemItemsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteItemItemsItemIdDeleteMutation = (
  options?: Partial<Options<DeleteItemItemsItemIdDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteItemItemsItemIdDeleteResponse,
    DeleteItemItemsItemIdDeleteError,
    Options<DeleteItemItemsItemIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemItemsItemIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readItemItemsItemIdGetQueryKey = (
  options: Options<ReadItemItemsItemIdGetData>,
) => [createQueryKey("readItemItemsItemIdGet", options)];

export const readItemItemsItemIdGetOptions = (
  options: Options<ReadItemItemsItemIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readItemItemsItemIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readItemItemsItemIdGetQueryKey(options),
  });
};
