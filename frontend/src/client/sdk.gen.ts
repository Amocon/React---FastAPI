// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  ReadItemsItemsGetData,
  ReadItemsItemsGetResponse,
  ReadItemsItemsGetError,
  CreateItemItemsPostData,
  CreateItemItemsPostResponse,
  CreateItemItemsPostError,
  DeleteItemItemsItemIdDeleteData,
  DeleteItemItemsItemIdDeleteResponse,
  DeleteItemItemsItemIdDeleteError,
  ReadItemItemsItemIdGetData,
  ReadItemItemsItemIdGetResponse,
  ReadItemItemsItemIdGetError,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Read Items
 * Read multiple items with pagination (skip & limit).
 */
export const readItemsItemsGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadItemsItemsGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadItemsItemsGetResponse,
    ReadItemsItemsGetError,
    ThrowOnError
  >({
    url: "/items",
    ...options,
  });
};

/**
 * Create Item
 * Create a new item in the database.
 */
export const createItemItemsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemItemsPostData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateItemItemsPostResponse,
    CreateItemItemsPostError,
    ThrowOnError
  >({
    url: "/items",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete Item
 * Delete an item by its ID.
 * Returns the deleted item, or 404 if not found.
 */
export const deleteItemItemsItemIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteItemItemsItemIdDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteItemItemsItemIdDeleteResponse,
    DeleteItemItemsItemIdDeleteError,
    ThrowOnError
  >({
    url: "/items/{item_id}",
    ...options,
  });
};

/**
 * Read Item
 * Read a single item by its ID.
 */
export const readItemItemsItemIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadItemItemsItemIdGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadItemItemsItemIdGetResponse,
    ReadItemItemsItemIdGetError,
    ThrowOnError
  >({
    url: "/items/{item_id}",
    ...options,
  });
};
